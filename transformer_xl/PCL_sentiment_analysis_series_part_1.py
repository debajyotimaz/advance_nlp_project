# -*- coding: utf-8 -*-
"""reference: https://github.com/shanayghag/Sentiment-classification-using-XLNet
Copy of Sentiment Analysis Series part-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GsdlyMFeJNnw5tNYHHCwGGVkUht2qxPC
"""

#from google.colab import drive
#drive.mount('/content/drive')

#!pip install sentencepiece
#!pip install transformers

#!pip install -q -U watermark

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext watermark
# %watermark -v -p numpy,pandas,torch,transformers

"""### Making the necessary imports"""

import transformers
from transformers import XLNetTokenizer, XLNetModel, AdamW, get_linear_schedule_with_warmup
import torch

import csv
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rc
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.metrics import accuracy_score, classification_report, f1_score, confusion_matrix, recall_score
from collections import defaultdict
from textwrap import wrap
from pylab import rcParams

from torch import nn, optim
from keras.utils import pad_sequences
from torch.utils.data import TensorDataset,RandomSampler,SequentialSampler
from torch.utils.data import Dataset, DataLoader
import torch.nn.functional as F

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format='retina'

sns.set(style='whitegrid', palette='muted', font_scale=1.2)

HAPPY_COLORS_PALETTE = ["#01BEFE", "#FFDD00", "#FF7D00", "#FF006D", "#ADFF02", "#8F00FF"]

sns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))

rcParams['figure.figsize'] = 12, 8

RANDOM_SEED = 42
np.random.seed(RANDOM_SEED)
torch.manual_seed(RANDOM_SEED)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
device

"""### Data Preprocessing"""

# df = pd.read_csv('/content/drive/MyDrive/projects/DebajyotiPhDwork/PCL detection/dontpatronizeme_pcl.tsv')
# df.head()

# Opening the file from MyDrive
file = open(r"/data1/debajyoti/adv_nlp_project/dontpatronizeme_pcl.tsv")
reader = csv.reader(file, delimiter="\t")
data = []
for row in reader:
  data.append(row)

df = pd.DataFrame(data[4:],  columns = ['serial_no', 'docID', 'keyword', 'country', 'paragraph', 'label' ] )
df.head()

df = df[:10464]
len(df)

from sklearn.utils import shuffle
df = shuffle(df)
df.head(20)

#checking for missing values
print('Is null: \n', df.isnull().sum() )

import re
def clean_text(text):
    text = re.sub(r"@[A-Za-z0-9]+", ' ', text)
    text = re.sub(r"https?://[A-Za-z0-9./]+", ' ', text)
    text = re.sub(r"[^a-zA-z.!?'0-9]", ' ', text)
    text = re.sub('\t', ' ',  text)
    text = re.sub(r" +", ' ', text)
    return text

df['paragraph'] = df['paragraph'].apply(clean_text)

# Turning labels to binary

label_dic = {'0':0,
             '1':0,
             '2':1,
             '3':1,
             '4':1}
df['label'] = df['label'].map(label_dic)
print(df['label'].value_counts())
#sns.countplot(x='label', data=df)
#plt.show()

# def sentiment2label(sentiment):
#     if sentiment == "1":
#         return 1
#     else :
#         return 0

# df['label'] = df['label'].apply(sentiment2label)

df['label'].value_counts()

class_names = ['negative', 'positive']

"""### Playing with XLNetTokenizer"""

from transformers import XLNetTokenizer, XLNetModel
PRE_TRAINED_MODEL_NAME = 'xlnet-base-cased'
tokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased')

input_txt = "India is my country. All Indians are my brothers and sisters"
encodings = tokenizer.encode_plus(input_txt, add_special_tokens=True, max_length=16, return_tensors='pt', return_token_type_ids=False, return_attention_mask=True, pad_to_max_length=False)

print('input_ids : ',encodings['input_ids'])

tokenizer.convert_ids_to_tokens(encodings['input_ids'][0])

type(encodings['attention_mask'])

attention_mask = pad_sequences(encodings['attention_mask'], maxlen=512, dtype=torch.Tensor ,truncating="post",padding="post")

attention_mask = attention_mask.astype(dtype = 'int64')
attention_mask = torch.tensor(attention_mask) 
attention_mask.flatten()

encodings['input_ids']

"""### Checking the distribution of token lengths"""

token_lens = []

for txt in df['paragraph']:
  tokens = tokenizer.encode(txt, max_length=512)
  token_lens.append(len(tokens))

sns.distplot(token_lens)
plt.xlim([0, 1024]);
plt.xlabel('Token count');

MAX_LEN = 512

"""### Custom Dataset class"""

class ImdbDataset(Dataset):

    def __init__(self, reviews, targets, tokenizer, max_len):
        self.reviews = reviews
        self.targets = targets
        self.tokenizer = tokenizer
        self.max_len = max_len
    
    def __len__(self):
        return len(self.reviews)
    
    def __getitem__(self, item):
        review = str(self.reviews[item])
        target = self.targets[item]

        encoding = self.tokenizer.encode_plus(
        review,
        add_special_tokens=True,
        max_length=self.max_len,
        return_token_type_ids=False,
        pad_to_max_length=False,
        return_attention_mask=True,
        return_tensors='pt',
        )

        input_ids = pad_sequences(encoding['input_ids'], maxlen=MAX_LEN, dtype=torch.Tensor ,truncating="post",padding="post")
        input_ids = input_ids.astype(dtype = 'int64')
        input_ids = torch.tensor(input_ids) 

        attention_mask = pad_sequences(encoding['attention_mask'], maxlen=MAX_LEN, dtype=torch.Tensor ,truncating="post",padding="post")
        attention_mask = attention_mask.astype(dtype = 'int64')
        attention_mask = torch.tensor(attention_mask)       

        return {
        'review_text': review,
        'input_ids': input_ids,
        'attention_mask': attention_mask.flatten(),
        'targets': torch.tensor(target, dtype=torch.long)
        }

df_train, df_test = train_test_split(df, test_size=0.5, random_state=101)
df_val, df_test = train_test_split(df_test, test_size=0.5, random_state=101)

df_train.shape, df_val.shape, df_test.shape

"""### Custom Dataloader"""

def create_data_loader(df, tokenizer, max_len, batch_size):
  ds = ImdbDataset(
    reviews=df.paragraph.to_numpy(),
    targets=df.label.to_numpy(),
    tokenizer=tokenizer,
    max_len=max_len
  )

  return DataLoader(
    ds,
    batch_size=batch_size,
    num_workers=4
  )

BATCH_SIZE = 8

train_data_loader = create_data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)
val_data_loader = create_data_loader(df_val, tokenizer, MAX_LEN, BATCH_SIZE)
test_data_loader = create_data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)

"""### Loading the Pre-trained XLNet model for sequence classification from huggingface transformers"""

from transformers import XLNetForSequenceClassification
model = XLNetForSequenceClassification.from_pretrained('xlnet-base-cased', num_labels = 2)
model = model.to(device)

model

"""### Setting Hyperparameters"""

EPOCHS = 3

param_optimizer = list(model.named_parameters())
no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']
optimizer_grouped_parameters = [
                                {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
                                {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay':0.0}
]
#optimizer = AdamW(optimizer_grouped_parameters, lr=3e-5)
optimizer = torch.optim.AdamW(optimizer_grouped_parameters, lr=0.0001)

total_steps = len(train_data_loader) * EPOCHS

scheduler = get_linear_schedule_with_warmup(
  optimizer,
  num_warmup_steps=0,
  num_training_steps=total_steps
)

"""### Sanity check with one batch"""

data = next(iter(val_data_loader))
data.keys()

input_ids = data['input_ids'].to(device)
attention_mask = data['attention_mask'].to(device)
targets = data['targets'].to(device)
print(input_ids.reshape(BATCH_SIZE,512).shape) # batch size x seq length
print(attention_mask.shape) # batch size x seq length

input_ids[0]

outputs = model(input_ids.reshape(BATCH_SIZE,512), token_type_ids=None, attention_mask=attention_mask, labels=targets)
outputs

type(outputs[0])

"""### Defining the training step function"""

from sklearn import metrics
def train_epoch(model, data_loader, optimizer, device, scheduler, n_examples):
    model = model.train()
    losses = []
    acc = 0
    counter = 0
  
    for d in data_loader:
        #print(d["input_ids"].shape)
        input_ids = d["input_ids"].reshape(BATCH_SIZE,512).to(device)
        attention_mask = d["attention_mask"].to(device)
        targets = d["targets"].to(device)
        
        outputs = model(input_ids=input_ids, token_type_ids=None, attention_mask=attention_mask, labels = targets)
        loss = outputs[0]
        logits = outputs[1]

        # preds = preds.cpu().detach().numpy()
        _, prediction = torch.max(outputs[1], dim=1)
        targets = targets.cpu().detach().numpy()
        prediction = prediction.cpu().detach().numpy()
        accuracy = metrics.accuracy_score(targets, prediction)

        acc += accuracy
        losses.append(loss.item())
        
        loss.backward()

        nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()
        counter = counter + 1

    return acc / counter, np.mean(losses)

"""### Defining the evaluation function"""

def eval_model(model, data_loader, device, n_examples):
    model = model.eval()
    losses = []
    acc = 0
    counter = 0
  
    with torch.no_grad():
        for d in data_loader:
            input_ids = d["input_ids"].reshape(BATCH_SIZE,512).to(device)
            attention_mask = d["attention_mask"].to(device)
            targets = d["targets"].to(device)
            
            outputs = model(input_ids=input_ids, token_type_ids=None, attention_mask=attention_mask, labels = targets)
            loss = outputs[0]
            logits = outputs[1]

            _, prediction = torch.max(outputs[1], dim=1)
            targets = targets.cpu().detach().numpy()
            prediction = prediction.cpu().detach().numpy()
            #print(prediction.shape)
            accuracy = metrics.accuracy_score(targets, prediction)

            acc += accuracy
            losses.append(loss.item())
            counter += 1

    return acc / counter, np.mean(losses)

"""### Fine-tuning the pre-trained model"""

# Commented out IPython magic to ensure Python compatibility.

history = defaultdict(list)
best_accuracy = 0

for epoch in range(EPOCHS):
     print(f'Epoch {epoch + 1}/{EPOCHS}')
     print('-' * 10)

     train_acc, train_loss = train_epoch(
         model,
         train_data_loader,     
         optimizer, 
         device, 
         scheduler, 
         len(df_train)
     )

     print(f'Train loss {train_loss} Train accuracy {train_acc}')

     val_acc, val_loss = eval_model(
         model,
         val_data_loader, 
         device, 
         len(df_val)
     )
 
     print(f'Val loss {val_loss} Val accuracy {val_acc}')
     print()
 
     history['train_acc'].append(train_acc)
     history['train_loss'].append(train_loss)
     history['val_acc'].append(val_acc)
     history['val_loss'].append(val_loss)
 
     if val_acc > best_accuracy:
         torch.save(model.state_dict(), 'models/xlnet_model.bin')
         best_accuracy = val_acc

"""### Evaluation of the fine-tuned model"""

model.load_state_dict(torch.load('models/xlnet_model.bin'))

model = model.to(device)

test_acc, test_loss = eval_model(
  model,
  test_data_loader,
  device,
  len(df_test)
)

#print('Test Accuracy :', test_acc)
print('Test Loss :', test_loss)

def get_predictions(model, data_loader):
    model = model.eval()
    
    review_texts = []
    predictions = []
    prediction_probs = []
    real_values = []

    with torch.no_grad():
        for d in data_loader:

            texts = d["review_text"]
            input_ids = d["input_ids"].reshape(BATCH_SIZE,512).to(device)
            attention_mask = d["attention_mask"].to(device)
            targets = d["targets"].to(device)
            
            outputs = model(input_ids=input_ids, token_type_ids=None, attention_mask=attention_mask, labels = targets)

            loss = outputs[0]
            logits = outputs[1]
            
            _, preds = torch.max(outputs[1], dim=1)

            probs = F.softmax(outputs[1], dim=1)

            review_texts.extend(texts)
            predictions.extend(preds)
            prediction_probs.extend(probs)
            real_values.extend(targets)

    predictions = torch.stack(predictions).cpu()
    prediction_probs = torch.stack(prediction_probs).cpu()
    real_values = torch.stack(real_values).cpu()
    return review_texts, predictions, prediction_probs, real_values

y_review_texts, y_pred, y_pred_probs, y_test = get_predictions(
  model,
  test_data_loader
)

print('accuracy score: {}'.format(sklearn.metrics.accuracy_score(y_test, y_pred)))
print('precision score: {}'.format(sklearn.metrics.precision_score(y_test, y_pred, average = 'macro', zero_division=1)))
print('recall score: {}'.format(sklearn.metrics.recall_score(y_test, y_pred,  average = 'macro', zero_division=1)))
print('F1 score: {}'.format(f1_score(y_test, y_pred,  average = 'macro', zero_division=1)))
print('\nConfusion Matrix:\n', confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=class_names))

"""### Custom prediction function on raw text"""

#def predict_sentiment(text):
#    review_text = text
#
#    encoded_review = tokenizer.encode_plus(
#    review_text,
#    max_length=MAX_LEN,
#    add_special_tokens=True,
#    return_token_type_ids=False,
#    pad_to_max_length=False,
#    return_attention_mask=True,
#    return_tensors='pt',
#    )
#
#    input_ids = pad_sequences(encoded_review['input_ids'], maxlen=MAX_LEN, dtype=torch.Tensor ,truncating="post",padding="post")
#    input_ids = input_ids.astype(dtype = 'int64')
#    input_ids = torch.tensor(input_ids) 
#
#    attention_mask = pad_sequences(encoded_review['attention_mask'], maxlen=MAX_LEN, dtype=torch.Tensor ,truncating="post",padding="post")
#    attention_mask = attention_mask.astype(dtype = 'int64')
#    attention_mask = torch.tensor(attention_mask) 
#
#    input_ids = input_ids.reshape(BATCH_SIZE,512).to(device)
#    attention_mask = attention_mask.to(device)
#
#    outputs = model(input_ids=input_ids, attention_mask=attention_mask)
#
#    outputs = outputs[0][0].cpu().detach()
#
#    probs = F.softmax(outputs, dim=-1).cpu().detach().numpy().tolist()
#    _, prediction = torch.max(outputs, dim =-1)
#
#    print("Positive score:", probs[1])
#    print("Negative score:", probs[0])
#    print(f'Review text: {review_text}')
#    print(f'Sentiment  : {class_names[prediction]}')
#
#text = "Movie is the worst one I have ever seen!! The story has no meaning at all"
#predict_sentiment(text)
#
#text = "This is the best movie I have ever seen!! The story is such a motivation"
#predict_sentiment(text)
